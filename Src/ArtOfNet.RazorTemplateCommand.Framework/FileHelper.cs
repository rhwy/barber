using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.Dynamic;

namespace ArtOfNet.RazorTemplateCommand.Framework
{
    public class FileHelper
    {
        public string Folderpath
        {
            get
            {
                return Environment.CurrentDirectory;
            }
        }
        public string BuildDate
        {
            get
            {
                return string.Format("Generated by Template {0}", DateTime.Now);
            }
        }

        /// <summary>
        /// Render an inline Razor template with the data given as model
        /// </summary>
        /// <param name="template">string with Razor syntax inside</param>
        /// <param name="model">any object model, even anonymous types</param>
        /// <returns></returns>
        public string RenderString(string template, dynamic model)
        {
            //this one works : 
            string result = RazorEngineHelper.ProcessTemplateWithAnonymous(template, model);
            
            //does not work:
            //string result = RazorEngineHelper.ProcessTemplate(template, model);

            if (!string.IsNullOrEmpty(result))
            {
                return result;
            }
            return string.Empty;
        }


        /// <summary>
        /// Render a template from a file with Razor syntax and any object model
        /// </summary>
        /// <param name="templatePath">full or relative path to template file</param>
        /// <param name="model">any object model, even anonymous types</param>
        /// <returns></returns>
        public string Render(string templatePath, object model)
        {
            string content = loadContent(templatePath);
            if (string.IsNullOrEmpty(content))
            {
                return string.Empty;
            }
            return RenderString(content, model);
        }

        private string resolvePath(string path)
        {
            if (File.Exists(path))
            {
                return path;
            }
            if (path.StartsWith("~/"))
            {
                path = path.Remove(0, 1);
            }
            string fromCurrentPath = Path.Combine(Folderpath, path);
            if (File.Exists(fromCurrentPath))
            {
                return fromCurrentPath;
            }


            return string.Empty;
        }

        private string loadContent(string path)
        {
            string resolvedPath = resolvePath(path);
            if (string.IsNullOrEmpty(resolvedPath))
            {
                return string.Empty;
            }
            string content = File.ReadAllText(resolvedPath);
            return content;
        }
    }
}
